name: CI/CD React App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-north-1
      ECR_REPOSITORY: react-app
      ECR_REGISTRY: 168544657306.dkr.ecr.eu-north-1.amazonaws.com
      IMAGE_TAG: ${{ github.sha }}
      CLUSTER_NAME: react-cluster1
      SERVICE_NAME: react-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Fetch current task definition
        id: taskdef
        run: |
          aws ecs describe-task-definition --task-definition $SERVICE_NAME > taskdef.json

      - name: Create new task definition revision with new image
        id: newtask
        run: |
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" '
            .taskDefinition
            | {
                family,
                taskRoleArn,
                executionRoleArn,
                networkMode,
                containerDefinitions,
                volumes,
                placementConstraints,
                requiresCompatibilities,
                cpu,
                memory,
                tags,
                pidMode,
                ipcMode,
                proxyConfiguration,
                inferenceAccelerators,
                ephemeralStorage,
                runtimePlatform,
                enableFaultInjection
              }
            | .containerDefinitions[0].image = $IMAGE
          ' taskdef.json > new-taskdef.json

          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-taskdef.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --force-new-deployment
